import streamlit as st
from PIL import Image
import requests
from io import BytesIO

st.set_page_config(page_title="Nh·ªØng K·∫ª X√† L∆°", layout="centered")

# ===== CSS =====
st.markdown("""
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;800&display=swap');

        body {
            background: linear-gradient(45deg, #ff4b1f, #ff9068, #ff4b1f);
            background-size: 400% 400%;
            animation: fire 8s ease infinite;
            color: white;
            font-family: 'Poppins', sans-serif;
        }
        @keyframes fire {
            0% {background-position: 0% 50%;}
            50% {background-position: 100% 50%;}
            100% {background-position: 0% 50%;}
        }

        .title {
            text-align: center;
            font-size: 42px;
            font-weight: 800;
            margin-top: 24px;
            margin-bottom: 30px;
            color: #fff;
            text-shadow: 0 0 16px #ff4b1f, 0 0 28px #ff9068;
        }

        .fade-in { animation: fadeIn 0.9s ease-in-out; }
        @keyframes fadeIn { from {opacity:0} to {opacity:1} }

        .zoom-img { animation: zoomIn 1s ease-in-out; }
        @keyframes zoomIn { 0% {opacity:0; transform:scale(0.7)} 100% {opacity:1; transform:scale(1)} }

        img { border-radius: 12px; box-shadow: 0 0 20px rgba(0,0,0,0.4); margin-top:10px; }

        .footer {
            text-align: center;
            margin-top: 40px;
            font-size: 16px;
            font-weight: 600;
        }
        .hint {
            background: rgba(0,0,0,0.2);
            padding: 10px;
            border-radius: 8px;
            margin-top: 8px;
            color: #fff;
        }
    </style>
""", unsafe_allow_html=True)

st.markdown("<div class='title'>üî• Ch·ªß ƒë·ªÅ: C√¢u chuy·ªán v·ªÅ nh·ªØng k·∫ª x√† l∆° üî•</div>", unsafe_allow_html=True)

st.markdown("""
**H∆∞·ªõng d·∫´n nhanh:**  
- B·∫°n c√≥ th·ªÉ **upload ·∫£nh t·ª´ m√°y** (khuy·∫øn ngh·ªã) ho·∫∑c **d√°n link ·∫£nh tr·ª±c ti·∫øp** (link ph·∫£i k·∫øt th√∫c b·∫±ng .jpg/.png/.jpeg/.gif).
- N·∫øu ·∫£nh kh√¥ng hi·ªán, th·ª≠ upload thay v√¨ d√πng link.
""")

# ---------- helper load image ----------
def load_image_from_url(url: str):
    try:
        resp = requests.get(url, timeout=8)
        resp.raise_for_status()
        return Image.open(BytesIO(resp.content))
    except Exception as e:
        return None

def display_image(obj, caption="", styles=""):
    """
    obj: can be PIL.Image or file-like or URL string
    """
    if isinstance(obj, Image.Image):
        st.image(obj, caption=caption, use_container_width=True)
        return True
    if isinstance(obj, str):
        # treat as URL
        img = load_image_from_url(obj)
        if img:
            st.image(img, caption=caption, use_container_width=True)
            return True
    # if file-like (UploadedFile)
    try:
        st.image(obj, caption=caption, use_container_width=True)
        return True
    except Exception:
        return False

# ---------- Phong section (zoom effect) ----------
with st.expander("üíô Phong: bi·ªát danh k·∫ª hay kh·ªãa v√† kh√¥ng th√≠ch ng∆∞·ªùi kh√°c kh·ªãa l·∫°i", expanded=False):
    st.write("")  # spacing
    st.markdown("<div class='hint'>T·∫£i l√™n ·∫£nh Phong (t·ªët nh·∫•t) ho·∫∑c d√°n link tr·ª±c ti·∫øp.</div>", unsafe_allow_html=True)
    phong_file = st.file_uploader("Upload ·∫£nh Phong (jpg/png)", type=["png","jpg","jpeg","gif"], key="up_phong")
    phong_url = st.text_input("Ho·∫∑c d√°n link ·∫£nh Phong (direct link)", key="url_phong", placeholder="https://...")
    displayed = False
    if phong_file is not None:
        displayed = display_image(phong_file, caption="Phong üíô")
    elif phong_url:
        displayed = display_image(phong_url, caption="Phong üíô")
    if displayed:
        # th√™m class zoom (unsafe html wrapper)
        st.markdown("<div class='zoom-img'></div>", unsafe_allow_html=True)
    else:
        st.warning("Ch∆∞a c√≥ ·∫£nh h·ª£p l·ªá cho Phong. H√£y upload file ho·∫∑c d√°n link direct image (k·∫øt th√∫c b·∫±ng .jpg/.png).")

# ---------- Nhi section ----------
with st.expander("üíõ Nhi: k·∫ª b·ªã kh·ªãa v√† c≈©ng hay ƒëi kh·ªãa", expanded=False):
    st.markdown("<div class='hint'>T·∫£i l√™n 1 ho·∫∑c nhi·ªÅu ·∫£nh cho Nhi (b·∫°n c√≥ th·ªÉ upload 2 ·∫£nh). N·∫øu d√πng link, ph·∫£i l√† direct image link.</div>", unsafe_allow_html=True)
    nhi_files = st.file_uploader("Upload ·∫£nh Nhi (c√≥ th·ªÉ ch·ªçn nhi·ªÅu)", type=["png","jpg","jpeg","gif"], accept_multiple_files=True, key="up_nhi")
    nhi_url = st.text_input("Ho·∫∑c d√°n link ·∫£nh Nhi (c√°ch 1 link)", key="url_nhi", placeholder="https://...")
    shown = False
    if nhi_files:
        for f in nhi_files:
            display_image(f, caption="Nhi üíõ")
            shown = True
    elif nhi_url:
        if display_image(nhi_url, caption="Nhi üíõ"):
            shown = True
    if not shown:
        st.info("Ch∆∞a c√≥ ·∫£nh Nhi. Upload ·∫£nh ho·∫∑c d√°n link.")

# ---------- Ch√¢u section ----------
with st.expander("üíó Ch√¢u: k·∫ª nh·∫≠n t·ªôi j c≈©ng nh·∫≠n j c≈©ng kh√≥t", expanded=False):
    st.markdown("<div class='hint'>Upload ·∫£nh cho Ch√¢u ho·∫∑c d√°n link direct image.</div>", unsafe_allow_html=True)
    chau_files = st.file_uploader("Upload ·∫£nh Ch√¢u (c√≥ th·ªÉ ch·ªçn nhi·ªÅu)", type=["png","jpg","jpeg","gif"], accept_multiple_files=True, key="up_chau")
    chau_url = st.text_input("Ho·∫∑c d√°n link ·∫£nh Ch√¢u (c√°ch 1 link)", key="url_chau", placeholder="https://...")
    shown_c = False
    if chau_files:
        for f in chau_files:
            display_image(f, caption="Ch√¢u üíó")
            shown_c = True
    elif chau_url:
        if display_image(chau_url, caption="Ch√¢u üíó"):
            shown_c = True
    if not shown_c:
        st.info("Ch∆∞a c√≥ ·∫£nh Ch√¢u. Upload ·∫£nh ho·∫∑c d√°n link.")

st.markdown("<div class='footer'>üí´ Cre by Philong üí´</div>", unsafe_allow_html=True)
